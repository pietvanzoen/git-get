#!/usr/bin/env bash
main() {
  set -e

  (
    echo "==> Testing git-get"
    setup
    cd "$($INSTALL_DIR/git-get https://github.com/pietvanzoen/git-get.git)"
    assert_equal $(pwd) "$GIT_PATH/github.com/pietvanzoen/git-get" "sets correct repo path"
  )

  (
    echo "==> Testing default prefix"
    setup
    export GIT_GET_DEFAULT_PREFIX="https://github.com/"
    $INSTALL_DIR/git-get pietvanzoen/hint
    assert_exists "$GIT_PATH/github.com/pietvanzoen/hint/.git" "clones repo using default prefix"
  )

  (
    echo "==> Testing failed clone"
    setup
    $INSTALL_DIR/git-get https://github.com/pietvanzoen/wibble.git || true
    assert_not_exists "$GIT_PATH/github.com/pietvanzoen" "does not create parent directory for failed clone"

    $INSTALL_DIR/git-get https://github.com/pietvanzoen/hint.git
    $INSTALL_DIR/git-get https://github.com/pietvanzoen/wibble.git || true
    assert_exists "$GIT_PATH/github.com/pietvanzoen/hint" "does not remove parent directory for failed clone when another repo exists"
  )

  (
    echo "==> Testing when path exists"
    setup
    $INSTALL_DIR/git-get https://github.com/pietvanzoen/hint.git
    cd "$($INSTALL_DIR/git-get https://github.com/pietvanzoen/hint.git)"
    assert_equal $(pwd) "$GIT_PATH/github.com/pietvanzoen/hint" "returns repo path when it has already been cloned"
  )

  (
    echo "==> Testing when path exists and forced clone"
    setup
    $INSTALL_DIR/git-get https://github.com/pietvanzoen/hint.git
    cd "$($INSTALL_DIR/git-get -f https://github.com/pietvanzoen/hint.git)"
    assert_equal $(pwd) "$GIT_PATH/github.com/pietvanzoen/hint" "removes, reclones, and returns repo path"
  )
}

setup() {
  TEST_DIR="$(mktemp -d)"
  export GIT_PATH="$TEST_DIR/repos"
  export INSTALL_DIR="$TEST_DIR/bin"
  mkdir -p $INSTALL_DIR
  mkdir -p $GIT_PATH
  ./install
  assert_exists "$INSTALL_DIR/git-get" "git-get was installed"
}

assert() {
  if ! ($1); then
    echo "FAIL: $2"
    echo -e "  expected $1 to pass"
    exit 1
  fi
  echo "PASS: $2"

}

assert_equal() {
  if [[ "$1" != "$2" ]]; then
    echo "FAIL: $3"
    echo -e "  expected $2 \n  but got  $1"
    exit 1
  fi
  echo "PASS: $3"
}

assert_exists() {
  if ! [[ -s "$1" ]]; then
    echo "FAIL: $2"
    echo -e "  expected $1 to exist with a size greater than zero"
    exit 1
  fi
  echo "PASS: $2"
}

assert_not_exists() {
  if [[ -s "$1" ]]; then
    echo "FAIL: $2"
    echo -e "  expected $1 not to exist"
    exit 1
  fi
  echo "PASS: $2"
}

main
